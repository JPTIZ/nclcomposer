Tutorial: Introdução à NCL 3.0 utilizando o NCL Composer
========================================================
Roberto Gerson de Albuquerque Azevedo and Luiz Fernando Gomes Soares
v1.0, 2012-09
:doctype: book
:lang: pt-BR

// Atribute List
:nclcomposer: NCL Composer
:default_views: Estrutural, Leiaute, Outline, Propriedades, Textual e Validador
:structural_view: Visão Estrutural
:layout_view: Visão de Leiaute
:outline_view: Visão de Outline
:properties_view: Visão de Propriedades
:textual_view: Visão Textual
//End Attribute List

[[sec:intro]]
Introdução
----------
http://www.ncl.org.br[NCL (Nested Context Language)] é uma linguagem 
declarativa, uma aplicação http://www.xml.org[XML], para a criação de
aplicações multimídia interativas. A NCL traz uma separação clara entre 
os conteúdos de mídia (áudio, vídeo, imagem etc.) e a estrutura de uma
aplicação. Um documento NCL apenas define como os objetos de mídia são 
estruturados e relacionados, no tempo e no espaço.

O http://composer.telemidia.puc-rio.br[{nclcomposer}] é uma ferramenta de
autoria para NCL que visa facilitar o desenvolvimento de aplicações 
interativas para usuário não-programadores. Para isso, ele utiliza-se de
várias abstrações gráficas (visões) que permitem ao autor focar em apenas um
determinado ponto, durante cada fase distinta da autoria.

// O intuito principal deste tutorial é fornecer ao leitor a habilidade de 
// desenvolver programas NCL simples, usando o {nclcomposer}, e capacitá-lo a 
// melhor entender e exercitar os principais conceitos da NCL, no ambiente de
// autoria {nclcomposer}.

Baseado nos exemplos apresentados no Capítulo 3 do livro 
http://www.telemidia.puc-rio.br[Programando em NCL 3.0], este tutorial traz uma
introdução passo a passo de como utilizar o {nclcomposer} para o 
desenvolvimento de aplicações interativa usando o perfil NCL
3.0 para TV digital.

NOTE
****
Neste tutorial, não existe a preocupação nem de definir a linguagem NCL
completamente e nem de apresentar todas as funcionalidades do {nclcomposer}. Os
exemplos são desenvolvidos seguindo o que os autores acreditam que seja a
forma mais prática de utilização da ferramenta.

Para uma referência completa sobre a linguagem NCL, recomendamos:

  * O livro Programando em NCL 3.0 <<Soares2012>> (português); ou
  * o http://handbook.ncl.org.br[NCL Handbook] (inglês).

Para uma referência completa sobre o {nclcomposer}, é possível consultar o:

  * http://composer.telemidia.puc-rio.br[{nclcomposer} User Manual] (inglês).

Sempre que necessário, entretanto, no decorrer deste tutorial, buscamos
inserir ponteiros para partes específicas do http://handbook.ncl.org.br[NCL
Handbook] ou para o http://composer.telemidia.puc-rio.br[{nclcomposer} User
Manual] onde o leitor pode encontrar mais informações.
****

Estrutura de um documento Hipermídia
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Precisamos disso ?

O que tocar?
^^^^^^^^^^^^

Onde tocar?
^^^^^^^^^^^

Como tocar?
^^^^^^^^^^^

Quando tocar?
^^^^^^^^^^^^^

{nclcomposer}
~~~~~~~~~~~~
O {nclcomposer} é composto por várias visões, cada uma permitindo a
visualização de uma característica específica do documento hipermídia.

[[sec:structural_view]]
Visão Estrutural
^^^^^^^^^^^^^^^^
A {structural_view} permite que os autores de aplicações interajam visualmente
com a estrutura lógica do documento NCL. Em NCL, a estrutura lógica é
representada pelos seus objetos (nós de conteúdo e nós de composição) e os
elos entre esses objetos (representadas pelos elementos <link>).

TODO: Inserir FIGURA!

[[sec:layout_view]]
Visão de Leiaute
^^^^^^^^^^^^^^^^
A {layout_view} permite que os autores de aplicações NCL interajam visualmente
com as regiões onde os objetos de mídia serão inicialmente apresentados. Nesta
visão, os autores podem criar e manipular as regiões e a hierarquia de regiões
do documento.

TODO: Inserir FIGURA!

[[sec:outline_view]]
Visão de Outline
^^^^^^^^^^^^^^^^
A {outline_view} apresenta a estrutura do documento NCL como uma árvore,
permitindo aos autores navegarem no documento.

TODO: Inserir FIGURA!

[[sec:properties_view]]
Visão de Propriedades
^^^^^^^^^^^^^^^^^^^^^
A {properties_view}

[[sec:textual_view]]
Visão Textual
^^^^^^^^^^^^^
A {textual_view} permite aos usuários interagirem diretamente com o
código-fonte da aplicação NCL. Ela é um editor de texto avançado focado na
linguagem NCL e traz funcionalidades como: coloração sintática, sugestão de
código contextual e formatação de código.

A {textual_view} é recomendada especialmente para usuários avançados e que se
sentem à vontade com a sintaxe XML.

TODO: Inserir FIGURA!

[[sec:validator]]
Validador
^^^^^^^^^
TODO: Descrição
TODO: Inserir FIGURA!

[[sec:iniciando]]
Configurando o Ambiente
-----------------------
Para tirar total proveito deste tutorial é necessário que você tenha
instalados e configurados em sua máquina os seguintes softwares:
  
	* Algum player NCL (recomendamos o uso da 
http://www.softwarepublico.gov.br[Implementação de Referência do Ginga-NCL]);
  * http://composer.telemidia.puc-rio.br[{nclcomposer}]

Instalando o {nclcomposer}
~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Windows
^^^^^^^
TODO

Linux (Ubuntu/Debian)
^^^^^^^^^^^^^^^^^^^^^
TODO

Instalando o player NCL
~~~~~~~~~~~~~~~~~~~~~~~
TODO

Windows
^^^^^^^
TODO

Linux
^^^^^
TODO

Configuração do Ambiente
~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Configurando a disposição das visões 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TODO

Integração com o player NCL
^^^^^^^^^^^^^^^^^^^^^^^^^^^
TODO

[[sec:tutorial]]
O Primeiro João
---------------
Assim como no Capítulo 3 do Livro Programando em NCL, para introduzir a
programação em NCL usando o {nclcomposer}, iremos utilizar um único exemplo,
que será construído passo a passo: _O Primeiro João_.

_O Primeiro João_ é baseado em um vídeo, uma animação de mesmo nome
produzida por André Castelão, que por sua vez foi baseado nas crônicas de 
Mané Garrincha, escritas por Gerson Soares. 

NOTE: Uma descrição completa da animação _O Primeiro João_ pode ser encontrada
em: <<Soares2012>>.

Olá Garrincha!
~~~~~~~~~~~~~~
Em nosso primeiro exemplo, iremos apenas exibir o vídeo da animação. Para
isso, vamos abrir o {nclcomposer}. Depois de carregado, o {nclcomposer}
apresenta a seguinte tela de boas-vindas:

image::images/nclcomposer-welcomescreen.png[title="Tela de boas-vindas do {nclcomposer}.",width="70%",align="center"]

Nessa tela de boas-vindas podemos criar o nosso primeiro projeto. Para isso,
pressione o botão _New Project_ no canto esquerdo inferior da tela de
boas-vindas. A seguinte tela será exibida:

TIP: Outra possibilidade para criar um novo projeto é através do menu
_File->New Project_.

image::images/nclcomposer-newproject.png[title="Criação de um novo projeto.",width="50%",align="center"]

Nessa janela, atribua um nome para o projeto que você está criando, selecione
o diretório onde deseja salvá-lo e também marque a opção _Copy and Import the
default Connector Base_. 

NOTE: Nas próximas seções discutiremos em detalhes o que são os conectores
e também as bases de conectores. Por enquanto, apenas marque esta opção,
pois ela será útil para os próximos exemplos que iremos desenvolver.

Feito isso, pressione o botão _Finish_ e a seguinte tela será apresentada:

image::images/nclcomposer-body.png[title="Visão estrutural de um projeto recém-criado.",width="70%",align="center"]

Com o nosso projeto criado, podemos ter acesso às visões que já vem instaladas
por default no {nclcomposer}: {default_views}.

Como é possível observar, quando criamos um novo projeto, o {nclcomposer}
automaticamente já o cria com o cabeçalho e o corpo da aplicação.

Se você for para a visão _Textual_ poderá ver o código que já foi gerado por
padrão: 

[source,xml]
-------------------------------------------
<?xml version="1.0" encoding="ISO-8859-1"?>
<ncl id="myNCLDocID" xmlns="http://www.ncl.org.br/NCL3.0/EDTVProfile">
  <head>
    <connectorBase id="connBaseId">
      <importBase alias="conn" documentURI="defaultConnBase.ncl"/>
    </connectorBase>
  </head>
  <body id="myBodyID"/>
</ncl>
-------------------------------------------

.Para saber mais: eXtensible Markup Language
********************************************
A linguagem NCL é uma aplicação XML. Isso significa que ela segue a sintaxe
definida por esse padrão. Alguns pontos que você deve saber sobre XML são:

  * XML significa _EXtensible Markup Language_.
	* XML é uma linguagem de marcação.
	* XML foi desenvolvida para o transporte de dados. 
	* XML é uma recomendação W3C.
	* As tags XML não são predefinidas. Cada aplicação XML define as suas
	  próprias tags.
	* NCL é uma aplicação XML.

.TAG ou Elemento XML (<tag>...</tag> OU <tag />):
------------------------------------------------------
	<media id="video1" descriptor="dVideoWholeScreen">
		...
	</media>

	<media id="v ideo1" descriptor="dVideoWholeScreen"/>
------------------------------------------------------

.Atributo (formato: atributo="valor")
-------------------------------------
	* id
	* descriptor
-------------------------------------

.Valor de atributo (entre aspas "")
-----------------------------------
	  * "video1"
		* "dVideoWhole Screen"
-----------------------------------
********************************************

.Para saber mais: Estrutura do documento NCL
************************************************
Um documento NCL é um arquivo escrito em XML. Todo documento NCL possui a
seguinte estrutura:

  * uma seção de prólogo, definindo a codificação do arquivo.
	* um cabeçalho de arquivo NCL.
	* uma seção de cabeçalho, onde são definidos os elementos que serão
	  reutilizados no corpo.
	* o corpo do programa, (<body>).
	* pelo menos uma porta que indica onde o programa começa a ser exibido.
	* a conclusão do documento.

TODO: Figura com o esqueleto de um documento NCL.
************************************************

Adicionando um objeto de mídia
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Para inserir os nossos objetos de mídia, a forma mais simples é apenas
arrastar os objetos de mídia do seu Gerenciador de Arquivos para dentro da
{structural_view} do {nclcomposer}.

image::images/nclcomposer-drag_and_drop_animGar.png[title="Arraste os objetos de mídia do seu gerenciador de arquivos para a {structural_view} do {nclcomposer} para inserí-lo como objetos de mídia da aplicação.", width="70%", align="center"]

TIP: Outra forma de inserir um objeto de mídia, na {structural_view} é 
clicar com o botão direito sobre o corpo do documento e selecionar o menu 
_Insert -> Media_. Neste caso, é importante não esquecer de definir o caminho 
para o objeto de mídia, o que poder ser realizado selecionando o objeto que 
você acabou de editar e alterando o valor do atributo _src_ (ou na _Visão de
Propriedades_ ou na _Visão Textual_).

.Para saber mais: Objetos de Mídia
************************************************
TODO
************************************************

Informando o(s) objeto(s) de mídia que serão inicialmente exibidos
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Para informar que o objeto de mídia que acabamos de inserir deve iniciar
quanto a nossa aplicação multimídia iniciar, é suficiente criarmos uma porta
no corpo do documento, mapeando-a para o objeto de mídia.

Para inserirmos uma porta no corpo do documento pela _Visão
Estrutural_ é suficiente clicarmos com o botão direito sobre o corpo e
selecionarmos o menu _Insert->Port_.

image::images/nclcomposer-addport.png[title="Adicionando porta.", width="70%", align="center"]

Para mapearmos a porta que acabamos de criar para o objeto de mídia, devemos, 
segurando a tecla _SHIFT_, clicar sobre a porta e arrastar o ponteiro
do mouse para o objeto de mídia.  

image::images/nclcomposer-portcomponent.png[title="Mapeando porta para objeto de mídia.", width="70%", align="center"]

Com isso, já definimos que nossa aplicação é constituída apenas do objeto de
mídia _animGar_ e que quando a aplicação começar, o primeiro objeto de mídia a
ser apresentado será o vídeo da animação _O Primeiro João_. 

Propriedades e dimensões dos objetos de mídia
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Para finalizar o nosso exemplo inicial _Alô Garrincha_ só falta agora
definirmos onde esse vídeo da animação será exibido. A forma mais simples de
definir as dimensões do objeto de mídia, é por meio de propriedades.

Para inserirmos propriedades nos objetos de mídia por meio da _Visão
Estrutural_ a forma mais direta é clicando com o botão direto do mouse sobre o
objeto de mídia no qual queremos inserir uma nova propriedade e selecionando o
menu _Insert->Property_.

image::images/nclcomposer-addproperty.png[title="Adicionando propriedade à um objeto de mídia.", width="70%", align="center"]

Neste nosso primeiro exemplo estamos especialmente interessados nas
propriedades que definem a dimensão dos objetos: _top_, _left_, _width_ e
_height_.

Para editar a propriedade inserirmos anteriormente é suficiente a
selecionarmos pela {structural_view} e, depois, a partir da visão de
propriedades podemos definir o seu nome e seu valor.

No caso do nosso exemplo, devemos definir a propriedade _width_ e o valor
100%. Da mesma forma podemos devemos criar uma propriedade _height_, também
com o valor de 100%. Definindo assim, que nossa mídia irá ocupar toda a tela
quando for apresentada.

image::images/nclcomposer-property-width.png[title="Definindo largura do objeto de mídia.", width="70%", align="center"]

.Para saber mais: Propriedades dos Objetos de Mídia
***************************************************
TODO
***************************************************

Sincronismo de Mídia sem Interatividade
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Nosso próximo exemplo ilustra como é possível introduzir vários objetos de
mídia sincronizados no tempo. Vamos acrescentar:

  1. uma música de fundo (um chorinho), que deverá começar assim que terminar a
apresentação inicial do vídeo e começar a animação propriamente dita;
  2. um outro objeto de vídeo, que deverá ser exibido em paralelo e sincronizado
com o famoso “drible do vaivém” do Mané, retratado na animação; e ainda
  3. uma outra imagem, uma foto, que deverá ser exibida junto com a cena do
marcador caído no chão.

A imagem a seguir apresenta a visão temporal do nosso segundo exemplo:

image::images/temporal-view.png[title="Visão temporal do exemplo 02.", width="50%",align="center"]

Reúso Apenas de Relação
^^^^^^^^^^^^^^^^^^^^^^^
TODO

Reúso de Características de Apresentação e Importação de Base
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TODO

Adicionando Sincronismo com Interatividade
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Adicionando o Uso de Contextos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Adicionando Reúso de Objetos de Mídia
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Usando o Canal de Interatividade
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Uso de Múltiplos Dispositivos de Exibição
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Adaptação de Conteúdo
~~~~~~~~~~~~~~~~~~~~~
TODO

O Uso do Nó Settings
~~~~~~~~~~~~~~~~~~~~
TODO

Efeitos de Transição e Animação
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Navegação por Teclas
~~~~~~~~~~~~~~~~~~~~
TODO

Acrescentando um Objeto NCLua
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO

Conclusões
----------
TODO

[bibliography]
Bibliografia
------------
- [[[Soares2012]]] Luiz Fernando Gomes Soares and Simone Diniz Junqueira.
	'Programando em NCL 3.0'. PUC-Rio.

[appendix]
Lista de Connectores pré-definidos
----------------------------------
Ao criar um novo projeto no {nclcomposer} é possível adicionar uma base de
conectores pré-definidos (_defaultConnBase.ncl_). Esta base de conectores
pré-definidos traz um conjunto de 


[width="100%",frame="topbot",options="header"]
|=======
|          | *start*      | *stop*      | *pause*      | *resume*      | *set* + parâmetro _var_
|*onBegin* | onBeginStart | onBeginStop | onBeginPause | onBeginResume | onBeginSet
|*onEnd*   | onEndStart   | onEndStop   | onEndPause   | onEndResume   | onEndSet
|*onSelection* (seleção por mouse) | onSelectionStart  | onSelectionStop |
onSelectionPause | onSelectionResume | onSelectionSet
|*onSelection* + parâmetro _key_ (seleção por tecla) | onKeySelectionStart |
onKeySelectionStop | onKeySelectionPause | onKeySelectionResume |
onKeySelectionSet
|=======

  * TODO: Como definir minha própria base de conectores???
  * TODO: Como editar minha base de conectores default??

[appendix]
Onde encontrar mais informações
-------------------------------
TODO

[appendix]
Outras ferramentas de autoria
-----------------------------
Dado que existem diferente pefis de usuários para a linguagem NCL, é natural
que também existam várias ferramentas, cada uma focada em um determinado
perfil. O objetivo do {nclcomposer}, ao ser extensível por meio de plugins é
possibilitar que todas essas diferentes abstra

NCL Eclipse
~~~~~~~~~~~

CreaTVDigital
~~~~~~~~~~~~~

O {nclcomposer} não é a única ferramenta de autoria disponível para NCL. A
proposta do NCL Composer é servir como base para a criação de diversas visões
 {nclcomposer} não é a única ferramenta de autoria disponível para NCL. A
proposta do NCL Composer é servir como base para a criação de diversas visões

[appendix]
Licença
-------
TODO
